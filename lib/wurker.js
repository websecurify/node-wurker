// Generated by CoffeeScript 1.10.0
(function() {
  var slice = [].slice;

  module.exports = (function() {
    function _Class() {
      if (!this.context) {
        throw new Error('invalid context');
      }
      this.exports = {};
      this.context.addEventListener('message', this.handleInvoke.bind(this));
    }

    _Class.prototype.invoke = function() {
      var args, callback, handler, i, id, method, ref;
      method = arguments[0], args = 3 <= arguments.length ? slice.call(arguments, 1, i = arguments.length - 1) : (i = 1, []), callback = arguments[i++];
      if (typeof callback !== 'function') {
        ref = [args.concat(callback), function() {}], args = ref[0], callback = ref[1];
      }
      id = "invoke-" + (Date.now()) + "-" + (Math.random());
      this.context.addEventListener('message', handler = (function(_this) {
        return function(event) {
          if (event.data.type !== '_return') {
            return;
          }
          if (!event.data.method) {
            throw new Error('undefined method');
          }
          if (!event.data.args) {
            throw new Error('undefined args');
          }
          if (!event.data.id) {
            throw new Error('undefined id');
          }
          if (event.data.method !== method) {
            return;
          }
          if (event.data.id !== id) {
            return;
          }
          _this.context.removeEventListener('message', handler);
          return callback.apply(_this, event.data.args);
        };
      })(this));
      return this.context.postMessage({
        type: '_invoke',
        method: method,
        args: args,
        id: id
      });
    };

    _Class.prototype.handleInvoke = function(event) {
      if (event.data.type !== '_invoke') {
        return;
      }
      if (!event.data.method) {
        throw new Error('undefined method');
      }
      if (!event.data.args) {
        throw new Error('undefined args');
      }
      if (!event.data.id) {
        throw new Error('undefined id');
      }
      if (!(event.data.method in this.exports)) {
        throw new Error("undefined method " + event.data.method);
      }
      return this.exports[event.data.method].apply(this.exports, [].concat(event.data.args, [
        (function(_this) {
          return function() {
            var args;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            return _this.context.postMessage({
              type: '_return',
              method: event.data.method,
              args: args,
              id: event.data.id
            });
          };
        })(this)
      ]));
    };

    return _Class;

  })();

}).call(this);

//# sourceMappingURL=wurker.js.map
